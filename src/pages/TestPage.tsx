import React, {useState} from "react";
import {styled} from "@mui/system";
import {
    Box,
    Button,
    Checkbox,
    FormControl,
    FormControlLabel, Grid,
    InputLabel,
    Link,
    MenuItem,
    SelectChangeEvent,
    TextField,
    Typography
} from "@mui/material";
import testStep1_1 from "../img/test-step-1.1.png";
import testStep1_2 from "../img/test-step-1.2.png";
import testStep1_3 from "../img/test-step-1.3.png";
import testStep2_1 from "../img/test-step-2.1.png";
import testStep2_2 from "../img/test-step-2.2.png";
import testStep2_3 from "../img/test-step-2.3.png";
import testStep3_1 from "../img/test-step-3.1.png";
import testStep3_2 from "../img/test-step-3.2.png";
import testStep3_3 from "../img/test-step-3.3.png";
import testStep4_1 from "../img/test-step-4.1.png";
import testStep4_2 from "../img/test-step-4.2.png";
import testStep4_3 from "../img/test-step-4.3.png";
import testStep5_1 from "../img/test-step-5.1.png";
import testStep5_2 from "../img/test-step-5.2.png";
import testStep5_3 from "../img/test-step-5.3.png";
import testStep6_1 from "../img/test-step-6.1.png";
import testStep6_2 from "../img/test-step-6.2.png";
import testStep6_3 from "../img/test-step-6.3.png";
import testStep7_1 from "../img/test-step-7.1.png";
import testStep7_2 from "../img/test-step-7.2.png";
import testStep7_3 from "../img/test-step-7.3.png";
import testStep8_1 from "../img/test-step-8.1.png";
import testStep8_2 from "../img/test-step-8.2.png";
import testStep9_1 from "../img/test-step-9.1.png";
import testStep9_2 from "../img/test-step-9.2.png";
import testStep9_3 from "../img/test-step-9.3.png";
import testStep10_1 from "../img/test-step-10.1.png";
import testStep10_2 from "../img/test-step-10.2.png";
import testStep10_3 from "../img/test-step-10.3.png";
import CIconButton from "../components/inputs/CIconButton";
import Xmark from "../components/icons/Xmark";
import routes from "../routes";
import BoxFlexColumn from "../components/layout/BoxFlexColumn";
import ArrowSmallRight from "../components/icons/ArrowSmallRight";
import {buildStyles, CircularProgressbarWithChildren} from 'react-circular-progressbar';
import 'react-circular-progressbar/dist/styles.css';
import theme from "../theme";
import BoxFlex from "../components/layout/BoxFlex";
import CPaper from "../components/surfaces/CPaper";
import CSelect from "../components/inputs/CSelect";
import Emoji from "../components/functional/Emoji";
import ChipCheckbox from "../components/data-display/ChipCheckbox";
import StackChip from "../components/layout/StackChip";
import PainSlider from "../components/inputs/PainSlider";

const Background = styled(BoxFlex)(({theme}) => ({
    alignItems: "stretch",
    backgroundColor: theme.palette.surface.main,
    backgroundRepeat: "no-repeat",
    minHeight: "100vh",
})) as typeof BoxFlex;

const Content = styled(BoxFlexColumn)({
    alignItems: "center",
    justifyContent: "space-between",
    margin: "0 auto",
    width: 860,
    gridGap: 30,

    "@media (max-width: 899px)": {
        width: "100%",
    },
}) as typeof BoxFlexColumn;

const CloseButton = styled(CIconButton)({
    position: "absolute",
    top: 40,
    right: 40,

    "@media (max-width: 899px)": {
        top: 20,
        right: 20,
    },
}) as typeof Button;

const ProgressbarContainer = styled(Box)({
    width: 160,
    height: 160,
    marginBottom: 80,

    "@media (max-width: 899px)": {
        marginBottom: 40,
    },
}) as typeof Box;

const NextButton = styled(CIconButton)({
    width: "120px !important",
    height: "120px !important",
}) as typeof Button

const StyledCPaper = styled(CPaper)(({theme}) => ({
    width: 860,
    backgroundColor: theme.palette.background.default,

    "@media (max-width: 899px)": {
        width: "auto",
        backgroundColor: "transparent",
        padding: 20,
    },
})) as typeof CPaper;

const BoxFlexMedia = styled(BoxFlex)({
    "@media (max-width: 899px)": {
        flexDirection: "column",
    },
}) as typeof BoxFlex

const TestPage = () => {
    const progressInfo = {
        1: {
            percent: 10,
            backgroundImage: `url(${testStep1_1}), url(${testStep1_2}), url(${testStep1_3})`,
            backgroundPosition: "top left, right, 4% 86%",
        },
        2: {
            percent: 20,
            backgroundImage: `url(${testStep2_1}), url(${testStep2_2}), url(${testStep2_3})`,
            backgroundPosition: "76% 0,left, 95% 86%",
        },
        3: {
            percent: 30,
            backgroundImage: `url(${testStep3_1}), url(${testStep3_2}), url(${testStep3_3})`,
            backgroundPosition: "10.5% 0, right, left",
        },
        4: {
            percent: 40,
            backgroundImage: `url(${testStep4_1}), url(${testStep4_2}), url(${testStep4_3})`,
            backgroundPosition: "bottom left, right, left top",
        },
        5: {
            percent: 50,
            backgroundImage: `url(${testStep5_1}), url(${testStep5_2}), url(${testStep5_3})`,
            backgroundPosition: "100% 80%, 4% 86%, 34% 0%",
        },
        6: {
            percent: 60,
            backgroundImage: `url(${testStep6_1}), url(${testStep6_2}), url(${testStep6_3})`,
            backgroundPosition: "15% 0, right, 6% 90%",
        },
        7: {
            percent: 70,
            backgroundImage: `url(${testStep7_1}), url(${testStep7_2}), url(${testStep7_3})`,
            backgroundPosition: "92% 38%, 18% 7%, 5% 68%",
        },
        8: {
            percent: 80,
            backgroundImage: `url(${testStep8_1}), url(${testStep8_2})`,
            backgroundPosition: "top left, 93% 82%",
        },
        9: {
            percent: 90,
            backgroundImage: `url(${testStep9_1}), url(${testStep9_2}), url(${testStep9_3})`,
            backgroundPosition: "90% 0, bottom left, 92% 59%",
        },
        10: {
            percent: 100,
            backgroundImage: `url(${testStep10_1}), url(${testStep10_2}), url(${testStep10_3})`,
            backgroundPosition: "top center, 80% 15%, 20% 8%",
        },
    };
    const genderVariants: { [index: string]: string } = {
        man: "–ú—É–∂—á–∏–Ω–∞",
        woman: "–ñ–µ–Ω—â–∏–Ω–∞",
    };
    const painTypeVariants: { [index: string]: string } = {
        head: "–ì–æ–ª–æ–≤–µ",
        back: "–°–ø–∏–Ω–µ",
        knee: "–ö–æ–ª–µ–Ω–µ",
        joints: "–°—É—Å—Ç–∞–≤–∞—Ö",
        ribCage: "–ì—Ä—É–¥–Ω–æ–π –∫–ª–µ—Ç–∫–µ",
        womenPain: "–ñ–µ–Ω—Å–∫–∏–µ –±–æ–ª–∏",
        musclePain: "–ú—ã—à–µ—á–Ω—ã–µ –±–æ–ª–∏",
    };
    const painStartVariants: { [index: string]: string } = {
        lessThanThreeMonths: "–¥–æ 3 –º–µ—Å",
        ThreeAndSixMonths: "3 - 6 –º–µ—Å",
        moreYear: "> 1 –≥–æ–¥–∞",
    };
    const frequencyPainVariants: { [index: string]: string } = {
        everyDay: "–∫–∞–∂–¥—ã–π –¥–µ–Ω—å",
        twoThreeAWeek: "2-3 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é",
        oneInAWeek: "1 —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é",
        oneInAMonth: "1 —Ä–∞–∑ –≤ –º–µ—Å—è—Ü",
        lessThanOnceAMonth: "—Ä–µ–∂–µ —Ä–∞–∑–∞ –≤ –º–µ—Å—è—Ü",
        seasonal: "—Å–µ–∑–æ–Ω–Ω–æ (–æ—Å–µ–Ω—å/–≤–µ—Å–Ω–∞)",
    };
    const painNatureVariants: { [index: string]: Array<string | React.ReactElement> } = {
        shooting: ['–ø—Ä–æ—Å—Ç—Ä–µ–ª–∏–≤–∞—é—â–∞—è ', <Emoji symbol="‚ö°" label="High Voltage"/>],
        cutting: ['—Ä–µ–∂—É—â–∞—è ', <Emoji symbol="üî™" label="Kitchen Knife"/>],
        aching: ['–Ω–æ—é—â–∞—è ', <Emoji symbol="üå™" label="Tornado"/>],
        sharp: ['—Ä–µ–∑–∫–∞—è ', <Emoji symbol="üí•" label="Collision"/>],
        throbbing: ['–ø—É–ª—å—Å–∏—Ä—É—é—â–∞—è ', <Emoji symbol="üéØ" label="Bullseye"/>],
        pressing: ['–¥–∞–≤—è—â–∞—è ', <Emoji symbol="üß±" label="Brick"/>],
        dull: ['—Ç—É–ø–∞—è ', <Emoji symbol="ü™µ" label="Wood"/>],
        tingling: ['–ø–æ–∫–∞–ª—ã–≤–∞–Ω–∏–µ ', <Emoji symbol="‚ú®" label="Sparkles"/>],
        burning: ['–∂–≥—É—á–∞—è ', <Emoji symbol="üî•" label="Fire"/>],
    };
    const additionalSymptomVariants: { [index: string]: Array<string | React.ReactElement> } = {
        lethargy: ['–≤—è–ª–æ—Å—Ç—å ', <Emoji symbol="üò¥" label="Sleeping Face"/>],
        depression: ['–¥–µ–ø—Ä–µ—Å—Å–∏—è ', <Emoji symbol="üòî" label="Pensive Face"/>],
        dizziness: ['–≥–æ–ª–æ–≤–æ–∫—Ä—É–∂–µ–Ω–∏—è ', <Emoji symbol="ü§ï" label="Face with Head-Bandage"/>],
        nausea: ['—Ç–æ—à–Ω–æ—Ç–∞ ', <Emoji symbol="ü§¢" label="Nauseated Face"/>],
        difficultyBreathing: ['–∑–∞—Ç—Ä—É–¥–Ω–µ–Ω–Ω–æ–µ –¥—ã—Ö–∞–Ω–∏–µ ', <Emoji symbol="üòÆ‚Äçüí®" label="Face Exhaling"/>],
        anxiety: ['—Ç—Ä–µ–≤–æ–≥–∞ ', <Emoji symbol="üò®" label="Fearful Face"/>],
    };
    const painCausesAndEffectVariants: { [index: string]: string } = {
        insomnia: "–±–µ—Å—Å–æ–Ω–Ω–∏—Ü–∞",
        stress: "—Å—Ç—Ä–µ—Å—Å",
        weather: "–ø–æ–≥–æ–¥–∞",
        standing: "—Å—Ç–æ—è–Ω–∏–µ",
        sitting: "—Å–∏–¥–µ–Ω–∏–µ",
        walking: "–≥—É–ª—è–Ω–∏–µ",
        training: "—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞",
        food: "–µ–¥–∞",
        toilet: "–ø–æ—Ö–æ–¥ –≤ —Ç—É–∞–ª–µ—Ç",
    };
    const helperVariants: { [index: string]: Array<string | React.ReactElement> } = {
        conversationWithLovedOnes: ['–ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å –±–ª–∏–∑–∫–∏–º ', <Emoji symbol="üó£" label="Speaking Head"/>],
        exerciseStress: ['—Ñ–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å ', <Emoji symbol="üèä‚Äç‚ôÄÔ∏è" label="Woman Swimming"/>],
        coldWarm: ['—Ö–æ–ª–æ–¥ ', <Emoji symbol="‚ùÑ" label="Snowflake"/>, "\n\rÔ∏è/ —Ç–µ–ø–ª–æ ", <Emoji symbol="üî•" label="Fire"/>],
        rest: ['–æ—Ç–¥—ã—Ö ', <Emoji symbol="üèñ" label="Beach with Umbrella"/>],
        meditationYoga: ['–º–µ–¥–∏—Ç–∞—Ü–∏—è, –π–æ–≥–∞ ', <Emoji symbol="üßòüèª‚Äç‚ôÄÔ∏è" label="Woman in Lotus Position"/>],
        massage: ['–º–∞—Å—Å–∞–∂ ', <Emoji symbol="üíÜüèª‚Äç‚ôÄÔ∏è" label="Woman Getting Massage"/>],
        acupuncture: ['–∏–≥–ª–æ—É–∫–∞–ª—ã–≤–∞–Ω–∏–µ ', <Emoji symbol="üìç" label="Round Pushpin"/>],
        music: ['–º—É–∑—ã–∫–∞ ', <Emoji symbol="üéµ" label="Musical Note"/>],
    };
    const [step, setStep] = useState<keyof typeof progressInfo>(1)
    const [yearOfBirth, setYearOfBirth] = useState<string>('')
    const [gender, setGender] = useState<keyof typeof genderVariants>('')
    const [painTypes, setPainTypes] = useState<Array<keyof typeof painTypeVariants>>([])
    const [painScore, setPainScore] = useState<number>(4)
    const [painStart, setPainStart] = useState<keyof typeof painStartVariants>('')
    const [frequencyPain, setFrequencyPain] = useState<keyof typeof frequencyPainVariants>('')
    const [painNatures, setPainNatures] = useState<Array<keyof typeof painNatureVariants>>([])
    const [additionalSymptoms, setAdditionalSymptoms] = useState<Array<keyof typeof additionalSymptomVariants>>([])
    const [isNoAdditionalSymptom, setIsNoAdditionalSymptom] = useState<boolean>(false)
    const [painCausesAndEffects, setPainCausesAndEffects] = useState<Array<keyof typeof painCausesAndEffectVariants>>([])
    const [isTakingMedications, setIsTakingMedications] = useState<null | boolean>(null)
    const [helpers, setHelpers] = useState<Array<keyof typeof helperVariants>>([])
    const [firstName, setFirstName] = useState<string>('')
    const [secondName, setSecondName] = useState<string>('')
    const [patronymic, setPatronymic] = useState<string>('')
    const [phoneNumber, setPhoneNumber] = useState<string>('')
    const [email, setEmail] = useState<string>('')
    const [isAgree, setIsAgree] = useState<boolean>(true)

    const handleNextStep = () => {
        if (step === 10) {
            const res = {
                yearOfBirth: yearOfBirth,
                gender: gender,
                painTypes: painTypes,
                painScore: painScore,
                painStart: painStart,
                frequencyPain: frequencyPain,
                painNatures: painNatures,
                additionalSymptoms: additionalSymptoms,
                isNoAdditionalSymptom: isNoAdditionalSymptom,
                painCausesAndEffects: painCausesAndEffects,
                isTakingMedications: isTakingMedications,
                helpers: helpers,
                firstName: firstName,
                secondName: secondName,
                patronymic: patronymic,
                phoneNumber: phoneNumber,
                email: email,
                isAgree: isAgree,
            };
            // TODO add request
            alert(JSON.stringify(res))
        }
        setStep(prevState => {
            if (prevState < 10) {
                prevState++;
            }
            return prevState;
        })
    }

    const handleChangeGender = (event: SelectChangeEvent<HTMLInputElement | unknown>): void => {
        setGender(event.target.value as string);
    }

    const handleChangePainScore = (event: Event, newValue: number | number[]): void => {
        setPainScore(newValue as number)
    }

    const handleChangePainTypes = (newPainType: keyof typeof painTypeVariants): void => {
        setPainTypes(prevState => {
            return prevState.includes(newPainType)
                ? prevState.filter(i => i !== newPainType)
                : [...prevState, newPainType]
        })
    }

    const handleChangePainNatures = (newPainNature: keyof typeof painNatureVariants): void => {
        setPainNatures(prevState => {
            return prevState.includes(newPainNature)
                ? prevState.filter(i => i !== newPainNature)
                : [...prevState, newPainNature]
        })
    }

    const handleChangeAdditionalSymptoms = (newAdditionalSymptom: keyof typeof additionalSymptomVariants): void => {
        setAdditionalSymptoms(prevState => {
            return prevState.includes(newAdditionalSymptom)
                ? prevState.filter(i => i !== newAdditionalSymptom)
                : [...prevState, newAdditionalSymptom]
        })
    }

    const handleChangePainCausesAndEffects = (newPainCauseOrEffect: keyof typeof painCausesAndEffectVariants): void => {
        setPainCausesAndEffects(prevState => {
            return prevState.includes(newPainCauseOrEffect)
                ? prevState.filter(i => i !== newPainCauseOrEffect)
                : [...prevState, newPainCauseOrEffect]
        })
    }

    const handleChangeHelpers = (newHelper: keyof typeof helperVariants): void => {
        setHelpers(prevState => {
            return prevState.includes(newHelper)
                ? prevState.filter(i => i !== newHelper)
                : [...prevState, newHelper]
        })
    }

    const handleChangeIsNoAdditionalSymptom = (event: React.ChangeEvent<HTMLInputElement>): void => {
        setIsNoAdditionalSymptom(event.target.checked)
    }

    const handleChangeIsAgree = (event: React.ChangeEvent<HTMLInputElement>): void => {
        setIsAgree(event.target.checked)
    }

    const handleChangeIsTakingMedications = (newValue: boolean): void => {
        setIsTakingMedications(newValue)
    }

    const handleChangeFrequencyPain = (newValue: keyof typeof frequencyPainVariants): void => {
        setFrequencyPain(newValue)
    }

    const handleChangePainStart = (newValue: keyof typeof painStartVariants): void => {
        setPainStart(newValue)
    }

    return (
        <Background
            sx={{
                backgroundImage: progressInfo[step].backgroundImage,
                backgroundPosition: progressInfo[step].backgroundPosition,
            }}
        >
            <CloseButton
                variant="outlined"
                component={Link}
                href={routes.home}
            >
                <Xmark/>
            </CloseButton>
            <Content>
                <BoxFlex
                    alignItems="center"
                    height="100%"
                >
                    {step === 1 &&
                        <StyledCPaper>
                            <BoxFlexColumn
                                sx={{
                                    gridGap: 40,
                                }}
                            >
                                <Typography
                                    variant="h2"
                                >
                                    –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ, –Ω–∞–º –≤–∞–∂–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è –≤–∞—à–µ–π –±–æ–ª–∏, —á—Ç–æ–±—ã –ª—É—á—à–µ –ø–æ–Ω–∏–º–∞—Ç—å, –∫–∞–∫ –≤–∞–º
                                    –ø–æ–º–æ—á—å
                                </Typography>

                                <BoxFlexMedia
                                    sx={{
                                        gridGap: 20,
                                    }}
                                >
                                    <TextField
                                        label="–ì–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è"
                                        variant="standard"
                                        onChange={(e) => setYearOfBirth(e.target.value)}
                                        value={yearOfBirth}
                                    />

                                    <FormControl
                                        variant="standard"
                                        sx={{
                                            minWidth: 310,
                                        }}
                                    >
                                        <InputLabel>
                                            –ü–æ–ª
                                        </InputLabel>
                                        <CSelect
                                            value={gender}
                                            onChange={handleChangeGender}
                                            label="–ü–æ–ª"
                                        >
                                            <MenuItem value="">
                                                –ù–µ –≤—ã–±—Ä–∞–Ω–æ
                                            </MenuItem>
                                            {Object.keys(genderVariants).map((val: string, i) => (
                                                <MenuItem
                                                    key={i}
                                                    value={val}
                                                >
                                                    {genderVariants[val]}
                                                </MenuItem>
                                            ))}
                                        </CSelect>
                                    </FormControl>
                                </BoxFlexMedia>
                            </BoxFlexColumn>
                        </StyledCPaper>
                    }

                    {step === 2 &&
                        <StyledCPaper>
                            <BoxFlexColumn
                                sx={{
                                    gridGap: 40,
                                }}
                            >
                                <Typography
                                    variant="h3"
                                >
                                    –ú–æ—è —Ö—Ä–æ–Ω–∏—á–µ—Å–∫–∞—è –±–æ–ª—å —Å–∏–ª—å–Ω–æ –≤—ã–º–∞—Ç—ã–≤–∞–µ—Ç, –¥–æ–ª—å—à–µ –≤—Å–µ–≥–æ —è —Ç–µ—Ä–ø–ª—é –∏ –º–µ–Ω—è –±–µ—Å–ø–æ–∫–æ–∏—Ç –±–æ–ª—å
                                    –≤:
                                </Typography>

                                <StackChip>
                                    {Object.keys(painTypeVariants).map((val: string, i: number) => (
                                        <ChipCheckbox
                                            key={i}
                                            label={painTypeVariants[val]}
                                            checked={painTypes.includes(val)}
                                            onClick={() => handleChangePainTypes(val)}
                                        />
                                    ))}
                                </StackChip>
                            </BoxFlexColumn>
                        </StyledCPaper>
                    }

                    {step === 3 &&
                        <BoxFlexColumn
                            sx={{
                                gridGap: 17,
                            }}
                        >
                            <StyledCPaper>
                                <BoxFlexColumn
                                    sx={{
                                        gridGap: 56,
                                    }}
                                >
                                    <Typography
                                        variant="h3"
                                    >
                                        –ï—Å–ª–∏ –±–æ–ª—å –º–æ–∂–Ω–æ –æ—Ü–µ–Ω–∏—Ç—å –±–∞–ª–ª–∞–º–∏, —Ç–æ –æ—Ç–º–µ—á—É –µ—ë –≤:
                                    </Typography>

                                    <PainSlider
                                        aria-label="–ë–æ–ª—å –≤ –±–∞–ª–ª–∞—Ö"
                                        value={painScore}
                                        onChange={handleChangePainScore}
                                        step={1}
                                        min={1}
                                        max={10}
                                    />
                                </BoxFlexColumn>


                            </StyledCPaper>
                            <StyledCPaper>
                                <BoxFlexColumn
                                    sx={{
                                        gridGap: 35,
                                    }}
                                >
                                    <Typography
                                        variant="h3"
                                    >
                                        –ú–æ—è –±–æ–ª—å, –Ω–∞—á–∞–ª–∞—Å—å –ø—Ä–∏–º–µ—Ä–Ω–æ:
                                    </Typography>

                                    <BoxFlex
                                        sx={{
                                            justifyContent: "space-around",
                                        }}
                                    >
                                        {Object.keys(painStartVariants).map((val: string, i: number) => (
                                            <Button
                                                key={i}
                                                variant={painStart === val ? "contained" : "outlined"}
                                                size="large"
                                                onClick={() => handleChangePainStart(val)}
                                            >
                                                {painStartVariants[val]}
                                            </Button>
                                        ))}
                                    </BoxFlex>
                                </BoxFlexColumn>
                            </StyledCPaper>
                        </BoxFlexColumn>
                    }

                    {step === 4 &&
                        <StyledCPaper>
                            <BoxFlexColumn
                                sx={{
                                    gridGap: 53,
                                }}
                            >
                                <Typography
                                    variant="h3"
                                >
                                    –ë–æ–ª—å —è –∏—Å–ø—ã—Ç—ã–≤–∞—é:
                                </Typography>

                                <BoxFlex
                                    sx={{
                                        flexWrap: "wrap",
                                        justifyContent: "space-between",
                                        columnGap: "20px",
                                        rowGap: "53px",

                                        "@media (max-width: 899px)": {
                                            rowGap: "20px",
                                        },
                                    }}
                                >
                                    {Object.keys(frequencyPainVariants).map((val: string, i: number) => (
                                        <Button
                                            key={i}
                                            variant={frequencyPain === val ? "contained" : "outlined"}
                                            size="large"
                                            onClick={() => handleChangeFrequencyPain(val)}
                                        >
                                            {frequencyPainVariants[val]}
                                        </Button>
                                    ))}
                                </BoxFlex>
                            </BoxFlexColumn>
                        </StyledCPaper>
                    }

                    {step === 5 &&
                        <StyledCPaper>
                            <BoxFlexColumn
                                sx={{
                                    gridGap: 21,
                                }}
                            >
                                <div>
                                    <Typography
                                        variant="h3"
                                        mb="10px"
                                    >
                                        ¬´–•–∞—Ä–∞–∫—Ç–µ—Ä¬ª —Å–≤–æ–µ–π –±–æ–ª–∏ —è –æ–ø–∏—Å—ã–≤–∞—é —Å–ª–æ–≤–∞–º–∏:
                                    </Typography>
                                    <Typography
                                        variant="body2"
                                        color="text.disabled"
                                    >
                                        *–≤—ã–±–µ—Ä–∏—Ç–µ 2-3 —Å–ª–æ–≤–∞
                                    </Typography>
                                </div>

                                <StackChip>
                                    {Object.keys(painNatureVariants).map((val: string, i: number) => (
                                        <ChipCheckbox
                                            key={i}
                                            label={painNatureVariants[val]}
                                            checked={painNatures.includes(val)}
                                            onClick={() => handleChangePainNatures(val)}
                                        />
                                    ))}
                                </StackChip>
                            </BoxFlexColumn>
                        </StyledCPaper>
                    }

                    {step === 6 &&
                        <StyledCPaper>
                            <BoxFlexColumn
                                sx={{
                                    gridGap: 46,
                                }}
                            >
                                <Typography
                                    variant="h3"
                                >
                                    –ü–æ–º–∏–º–æ –±–æ–ª–∏, –≤–æ –≤—Ä–µ–º—è ¬´–ø—Ä–∏—Å—Ç—É–ø–∞¬ª –∏ –¥–æ/–ø–æ—Å–ª–µ —è –ø–æ—Ä–æ–π –æ—â—É—â–∞—é:
                                </Typography>

                                <StackChip>
                                    {Object.keys(additionalSymptomVariants).map((val: string, i: number) => (
                                        <ChipCheckbox
                                            key={i}
                                            label={additionalSymptomVariants[val]}
                                            checked={additionalSymptoms.includes(val)}
                                            onClick={() => handleChangeAdditionalSymptoms(val)}
                                        />
                                    ))}
                                </StackChip>

                                <FormControlLabel
                                    control={
                                        <Checkbox
                                            checked={isNoAdditionalSymptom}
                                            onChange={handleChangeIsNoAdditionalSymptom}
                                        />
                                    }
                                    label="–ù–∏—á–µ–≥–æ"
                                />
                            </BoxFlexColumn>
                        </StyledCPaper>
                    }

                    {step === 7 &&
                        <StyledCPaper>
                            <BoxFlexColumn
                                sx={{
                                    gridGap: 47,
                                }}
                            >
                                <Typography
                                    variant="h3"
                                >
                                    –ü–æ –º–æ–µ–º—É –º–Ω–µ–Ω–∏—é, –º–æ—é –±–æ–ª—å –≤—ã–∑—ã–≤–∞–µ—Ç –∏–ª–∏ —É—Å–∏–ª–∏–≤–∞–µ—Ç:
                                </Typography>

                                <StackChip>
                                    {Object.keys(painCausesAndEffectVariants).map((val: string, i: number) => (
                                        <ChipCheckbox
                                            key={i}
                                            label={painCausesAndEffectVariants[val]}
                                            checked={painCausesAndEffects.includes(val)}
                                            onClick={() => handleChangePainCausesAndEffects(val)}
                                        />
                                    ))}
                                </StackChip>
                            </BoxFlexColumn>
                        </StyledCPaper>
                    }

                    {step === 8 &&
                        <StyledCPaper>
                            <BoxFlexColumn
                                sx={{
                                    gridGap: 42,
                                }}
                            >
                                <Typography
                                    variant="h3"
                                >
                                    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç–µ –æ–±–µ–∑–±–æ–ª–µ–≤–∞—é—â–∏–µ –ø—Ä–µ–ø–∞—Ä–∞—Ç—ã?
                                </Typography>

                                <BoxFlex
                                    sx={{
                                        gridGap: 43,
                                    }}
                                >
                                    <Button
                                        variant={isTakingMedications === true ? "contained" : "outlined"}
                                        size="large"
                                        onClick={() => handleChangeIsTakingMedications(true)}
                                    >
                                        –¥–∞
                                    </Button>
                                    <Button
                                        variant={isTakingMedications === false ? "contained" : "outlined"}
                                        size="large"
                                        onClick={() => handleChangeIsTakingMedications(false)}
                                    >
                                        –Ω–µ—Ç
                                    </Button>
                                </BoxFlex>
                            </BoxFlexColumn>
                        </StyledCPaper>
                    }

                    {step === 9 &&
                        <StyledCPaper>
                            <BoxFlexColumn
                                sx={{
                                    gridGap: 35,
                                }}
                            >
                                <Typography
                                    variant="h3"
                                >
                                    –ü–æ–º–∏–º–æ –æ–±—ã—á–Ω—ã—Ö –ª–µ–∫–∞—Ä—Å—Ç–≤ –∏–∑ –∞–ø—Ç–µ–∫–∏ –º–Ω–µ –ø–æ–º–æ–≥–∞–µ—Ç:
                                </Typography>

                                <StackChip>
                                    {Object.keys(helperVariants).map((val: string, i: number) => (
                                        <ChipCheckbox
                                            key={i}
                                            label={helperVariants[val]}
                                            checked={helpers.includes(val)}
                                            onClick={() => handleChangeHelpers(val)}
                                        />
                                    ))}
                                </StackChip>
                            </BoxFlexColumn>
                        </StyledCPaper>
                    }

                    {step === 10 &&
                        <StyledCPaper>
                            <BoxFlexColumn
                                sx={{
                                    gridGap: 32,
                                }}
                            >
                                <Typography
                                    variant="h3"
                                >
                                    –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É–∫–∞–∂–∏—Ç–µ:
                                </Typography>

                                <BoxFlexColumn
                                    sx={{
                                        gridGap: 20,
                                    }}
                                >
                                    <TextField
                                        label="–ò–º—è"
                                        variant="standard"
                                        onChange={(e) => setFirstName(e.target.value)}
                                        value={firstName}
                                        required
                                    />

                                    <TextField
                                        label="–§–∞–º–∏–ª–∏—è"
                                        variant="standard"
                                        onChange={(e) => setSecondName(e.target.value)}
                                        value={secondName}
                                    />

                                    <TextField
                                        label="–û—Ç—á–µ—Å—Ç–≤–æ"
                                        variant="standard"
                                        onChange={(e) => setPatronymic(e.target.value)}
                                        value={patronymic}
                                    />

                                    <Grid
                                        container
                                        spacing={"20px"}
                                    >
                                        <Grid
                                            item
                                            xs={12}
                                            md={6}
                                        >
                                            <TextField
                                                label="–¢–µ–ª–µ—Ñ–æ–Ω"
                                                variant="standard"
                                                onChange={(e) => setPhoneNumber(e.target.value)}
                                                value={phoneNumber}
                                                fullWidth
                                                required
                                            />
                                        </Grid>

                                        <Grid
                                            item
                                            xs={12}
                                            md={6}
                                        >
                                            <TextField
                                                label="Email"
                                                variant="standard"
                                                onChange={(e) => setEmail(e.target.value)}
                                                type="email"
                                                value={email}
                                                fullWidth
                                            />
                                        </Grid>
                                    </Grid>
                                </BoxFlexColumn>

                                <FormControlLabel
                                    control={
                                        <Checkbox
                                            checked={isAgree}
                                            onChange={handleChangeIsAgree}
                                        />
                                    }
                                    label={
                                        <Typography
                                            variant="body3"
                                        >
                                            –î–∞—é —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ <Link href={routes.policyPrivacy}>–æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö
                                            –¥–∞–Ω–Ω—ã—Ö</Link>
                                        </Typography>
                                    }
                                />
                            </BoxFlexColumn>
                        </StyledCPaper>
                    }
                </BoxFlex>

                <ProgressbarContainer>
                    <CircularProgressbarWithChildren
                        value={progressInfo[step].percent}
                        strokeWidth={1}
                        styles={buildStyles({
                            pathColor: theme.palette.primary.main,
                            trailColor: theme.palette.border.main,
                        })}
                    >
                        <NextButton
                            variant="contained"
                            onClick={handleNextStep}
                        >
                            <ArrowSmallRight
                                width={40}
                                height={40}
                            />
                        </NextButton>
                    </CircularProgressbarWithChildren>
                </ProgressbarContainer>
            </Content>
        </Background>
    );
};

export default TestPage;
